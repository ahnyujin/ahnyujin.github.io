<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ahnyujin.github.io/</id><title>Yujin Ahn</title><subtitle></subtitle> <updated>2024-07-27T23:02:09+09:00</updated> <author> <name>Yujin Ahn</name> <uri>https://ahnyujin.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ahnyujin.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://ahnyujin.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2024 Yujin Ahn </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>쿠버네티스 완벽 가이드 / 마사야아오야마</title><link href="https://ahnyujin.github.io/posts/book-kubernetes-guide/" rel="alternate" type="text/html" title="쿠버네티스 완벽 가이드 / 마사야아오야마" /><published>2023-06-11T10:50:00+09:00</published> <updated>2023-06-11T10:50:00+09:00</updated> <id>https://ahnyujin.github.io/posts/book-kubernetes-guide/</id> <content src="https://ahnyujin.github.io/posts/book-kubernetes-guide/" /> <author> <name>Yujin Ahn</name> </author> <category term="Blogging" /> <category term="Book" /> <summary> 1장 도커 복습과 Hello, Kubernetes 1.1 도커 복습 도커 컨테이너란? 애플리케이션과 해당 애플리케이션을 실행하기 위한 실행환경을 패키징하여 애플리케이션을 쉽게 실행하기 위한 도구. 가상 머신은 하이퍼바이저를 이용하여 게스트 OS를 동작시키지만, 도커 컨테이너는 호스트 머신의 커널을 이용하여 네임스페이스 분리와 cgroups를 이용한 제어를 통해 독립적인 OS와 같은 환경을 만들 수 있다. 1 컨테이너당 1 프로세스 변경 불가능한 인프라(Immutable Infrastructure) 이미지로 생성한다. 경량의 도커 이미지로 생성한다 실행 계정은 root 이외의 사용자로 한다. 도커 이미지 # 도커 이미지 다운로드 $ docker image pull ${imag... </summary> </entry> <entry><title>소프트웨어 아키텍처 101 / 마크 리처드, 닐 포드</title><link href="https://ahnyujin.github.io/posts/book-software-architecture-101/" rel="alternate" type="text/html" title="소프트웨어 아키텍처 101 / 마크 리처드, 닐 포드" /><published>2023-01-30T10:50:00+09:00</published> <updated>2024-07-27T23:01:34+09:00</updated> <id>https://ahnyujin.github.io/posts/book-software-architecture-101/</id> <content src="https://ahnyujin.github.io/posts/book-software-architecture-101/" /> <author> <name>Yujin Ahn</name> </author> <category term="Blogging" /> <category term="Book" /> <summary> 소프트웨어 아키텍처 101 - 마크 리처즈, 닐 포드 1 서론 소프트웨어 아키텍트의 길은 왜 분명하지 않을까? 직업 자체에 대한 명확한 정의가 없다 업무 범위가 방대하다 과거 모듈성, 컴포넌트, 패턴 등 순수 기술적인 부분 + MSA 등 계속해서 확대 소프트웨어 개발 생태계 발전에 따라 끊임없이 변화한다 관련 자료들은 역사적 연관성을 강조한다 따라서 아키텍처를 공부하며 명심해야 할 것은, 현재의 환경에 맞는 결정을 하는 것이다. 소프트웨어 아키텍처는 시스템의 청사진이다. 시스템 아키텍처를 이해하는 방법 중 하나는 아래와 같다. 아키텍처 특성 아키텍처 결정 반드시 지켜야 할 원칙 시스템 제약 조건을 형성... </summary> </entry> <entry><title>그림으로 공부하는 마이크로서비스 구조 / 다루사와 히로유키 외 6명</title><link href="https://ahnyujin.github.io/posts/book-msa-overview/" rel="alternate" type="text/html" title="그림으로 공부하는 마이크로서비스 구조 / 다루사와 히로유키 외 6명" /><published>2023-01-15T11:45:00+09:00</published> <updated>2023-01-15T11:45:00+09:00</updated> <id>https://ahnyujin.github.io/posts/book-msa-overview/</id> <content src="https://ahnyujin.github.io/posts/book-msa-overview/" /> <author> <name>Yujin Ahn</name> </author> <category term="Blogging" /> <category term="Book" /> <summary> 그림으로 공부하는 마이크로서비스 구조 마이크로서비스란 IaaS 이후 빨라진 인프라 구축 속도에 맞추어 애플리케이션 개발/운영을 신속하게 진행하기 위해 필요한 설계, 개발, 운영 기법을 모은 것. 클라우드 네이티브 컴퓨팅 컨테이너, 오케스트레이션, 마이크로서비스 개발/운영속도 향상 품질 개선 컨테이너와 오케스트레이션을 이용한 빠른 기반 구축 데브옵스는 인프라, 애플리케이션 배포를 자동화 빠른 개발, 테스트, 배포를 가능하게 하고, 자동화를 통해 조작 실수를 최소화하여 품질 향상에 기여 확장성(scalability) 고가용성(high availability) 오케스... </summary> </entry> <entry><title>Extreme Programming / Kent Beck</title><link href="https://ahnyujin.github.io/posts/book-extreme-programming/" rel="alternate" type="text/html" title="Extreme Programming / Kent Beck" /><published>2023-01-02T12:08:00+09:00</published> <updated>2023-01-02T12:08:00+09:00</updated> <id>https://ahnyujin.github.io/posts/book-extreme-programming/</id> <content src="https://ahnyujin.github.io/posts/book-extreme-programming/" /> <author> <name>Yujin Ahn</name> </author> <category term="Blogging" /> <category term="Book" /> <summary> Extreme Programming(XP)는 무엇인가 XP는 Agile 프레임워크 중 하나, 소프트웨어 개발의 제약 조건들을 다루는 것에 바탕을 둔 방법론 방법론이란 ‘성공을 보장하려면 따라야 하는 규칙들의 집합’으로 해석되지만, XP는 팀마다 적용 방식이 다를 수 있고 XP를 적용하여도 성공 수준이 모두 다르다 양질의 소프트웨어를 만들어내고, 모호하거나 빠른 속도로 변하는 요구사항에 적응할 수 있게 한다 1999년 켄트벡이 좋은 소프트웨어 팀들이 공통으로 지닌 것들 중 가장 효과가 좋았던 것들을 엮어서 가장 순수하고, 가장 Extreme 한 모범 사례를 추출하였다(Extreme Programming Explained, October 1999). 그러... </summary> </entry> <entry><title>AWS Docs</title><link href="https://ahnyujin.github.io/posts/aws-docs/" rel="alternate" type="text/html" title="AWS Docs" /><published>2022-10-24T11:46:00+09:00</published> <updated>2022-10-25T00:24:01+09:00</updated> <id>https://ahnyujin.github.io/posts/aws-docs/</id> <content src="https://ahnyujin.github.io/posts/aws-docs/" /> <author> <name>Yujin Ahn</name> </author> <category term="Blogging" /> <category term="Network" /> <summary> AWS Docs Amazon EC2(Elastic Compute Cloud) AWS 클라우드에서 확장 가능 컴퓨팅 용량을 제공 EC2를 생성할 경우 다음의 기능을 제공한다 인스턴스 : 가상 컴퓨팅 환경 VPC(Virtual Private Cloud) 기본 보안 그룹 Amazon 머신 이미지(AMI) EBS(Elastic Block Store) 등… VPC(Virtual Private Cloud) AWS 클라우드에서 논리적으로 분리된 가상 네트워크 생성시 IPv4 주소 범위를 CIDR(Classless Inter-Domain Routing) 블록형태로... </summary> </entry> </feed>
